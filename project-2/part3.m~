I = im2double(imread('./samples/bricks_small.jpg'));
I = rgb2gray(I);

patchsize = 125;
numpatches = 3;
overlapsize = 24;
outputsize = patchsize*numpatches - (numpatches-1)*overlapsize;


[s_y, s_x] = size(I);

synth = zeros(outputsize, outputsize);

rng(0,'twister')

rx = randi([1 s_x-patchsize],1,1);
ry = randi([1 s_y-patchsize],1,1);

patch = I(ry:ry+patchsize-1, rx:rx+patchsize-1,1);

synth(1:patchsize,1:patchsize) = patch(:,:);

T = zeros(patchsize,patchsize);
M = zeros(patchsize,patchsize);
M(:,1:overlapsize) = 1;


for i=1:numpatches-1
    T(:,1:overlapsize) = synth(1 : patchsize, 1 +  i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize );
    ssd_matrix = ssd_patch(T,M,I);
    patch = choose_sample(ssd_matrix, I, patchsize, s_y, s_x);
    
    overlap1 = synth(1 : patchsize, 1 + i*patchsize -i*overlapsize : i*patchsize - (i-1)*overlapsize);
    
    overlap2 = patch(1 : patchsize, 1:overlapsize);
    
    bndcost = (overlap1-overlap2).^2;
    mask = transpose(cut(transpose(bndcost)));
    
    patch(:,1:overlapsize) = double(mask).*patch(:,1:overlapsize);
    
    synth(1:patchsize,1 + i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize) ...
        = ~mask.*synth(1:patchsize,1 + i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize );
        
    synth( 1: patchsize, 1 + i*patchsize - i*overlapsize : (i+1)*patchsize - i*overlapsize ) ...
        = synth( 1: patchsize, 1 + i*patchsize - i*overlapsize : (i+1)*patchsize - i*overlapsize ) + patch;
end

for i=1:numpatches -1 
    for j=1:numpatches - 1
        T = zeros(patchsize,patchsize);
        M = zeros(patchsize,patchsize);
        if j == 1
            T(1:overlapsize,:) = synth( 1 +  i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize , 1 : patchsize);
            M(1:overlapsize,:) = 1;
            ssd_matrix = ssd_patch(T,M,I);
            patch = choose_sample(ssd_matrix, I, patchsize, s_y, s_x);

            overlap1 = synth( 1 + i*patchsize -i*overlapsize : i*patchsize - (i-1)*overlapsize, 1:patchsize);

            overlap2 = patch( 1:overlapsize, 1 : patchsize);

            bndcost = (overlap1-overlap2).^2;
            mask = cut(bndcost);
            
            synth(1 + i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize, 1:patchsize) ...
                = ~mask.*synth(1 + i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize, 1:patchsize);
    
            patch(1:overlapsize,:) = double(mask).*patch(1:overlapsize,:);
            
            synth( 1 + i*patchsize - i*overlapsize :  (i+1)*patchsize - i*overlapsize , ...
                1: patchsize) = synth( 1 + i*patchsize - i*overlapsize :  (i+1)*patchsize - i*overlapsize , 1: patchsize) + patch;

        end
            T(1:overlapsize,1:patchsize) ...
              = synth( 1 +  i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize , 1 + j*patchsize - j*overlapsize : (j+1)*patchsize -j*overlapsize);
            T(1:patchsize , 1 : overlapsize) ...
                = synth( 1 + i*patchsize - i*overlapsize : (i+1)*patchsize -i*overlapsize , 1 +  j*patchsize - j*overlapsize : j*patchsize - (j-1)*overlapsize);
            M(1:overlapsize,:) = 1;
            M(:,1:overlapsize) = 1;
            
            patch = choose_sample(ssd_matrix, I, patchsize, s_y, s_x);
            
            overlap_h1 = ...
              synth( 1 +  i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize , 1 + j*patchsize - j*overlapsize : (j+1)*patchsize -j*overlapsize);
            
            overlap_h2 = ...
                patch(1:overlapsize,1:patchsize);

            bndcost = (overlap_h1-overlap_h2).^2;
            mask1 = cut(bndcost);
            
            
            overlap_v1 = ...
                synth( 1 + i*patchsize - i*overlapsize : (i+1)*patchsize -i*overlapsize , 1 +  j*patchsize - j*overlapsize : j*patchsize - (j-1)*overlapsize);
            
            overlap_v2 = ...
                patch(1:patchsize,1:overlapsize);

            bndcost = (overlap_v1-overlap_v2).^2;
            mask2 = transpose(cut(transpose(bndcost)));
            
            
            mask1(1:overlapsize,1:overlapsize) = mask1(1:overlapsize,1:overlapsize) & mask2(1:overlapsize,1:overlapsize);
            mask2(1:overlapsize,1:overlapsize) = mask1(1:overlapsize,1:overlapsize) & mask2(1:overlapsize,1:overlapsize);
     
            patch(1:overlapsize,:) = mask1.*patch(1:overlapsize,:);
            patch(:,1:overlapsize) = mask2.*patch(:,1:overlapsize);
            
            synth(1 +  i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize , ...
                1 + j*patchsize - j*overlapsize : (j+1)*patchsize - j*overlapsize) ...
                = ~mask1.*synth(1 +  i*patchsize - i*overlapsize : i*patchsize - (i-1)*overlapsize, ...
                1 + j*patchsize - j*overlapsize : (j+1)*patchsize - j*overlapsize);
            
            synth(1 + i*patchsize - i*overlapsize : (i+1)*patchsize - i*overlapsize, ...
                1 + j*patchsize - j*overlapsize : j*patchsize - (j-1)*overlapsize ) ...
                = ~mask2.*synth(1 + i*patchsize - i*overlapsize : (i+1)*patchsize - i*overlapsize, ...
                1 + j*patchsize - j*overlapsize : j*patchsize - (j-1)*overlapsize );
            
            synth( 1 + i*patchsize - i * overlapsize:  (i+1)*patchsize - i*overlapsize , ...
                1 + j*patchsize - j*overlapsize: (j+1)*patchsize - j*overlapsize) ...
                = synth( 1 + i*patchsize - i * overlapsize:  (i+1)*patchsize - i*overlapsize , ...
                1 + j*patchsize - j*overlapsize: (j+1)*patchsize - j*overlapsize) ... 
                + patch;
    end
end

imshow(synth,[])

function patch = choose_sample(ssd_matrix, I, patchsize, s_y, s_x)
    pby2 = floor(patchsize/2);
    [R,C] = ndgrid( 1 : size(ssd_matrix,1), 1:size(ssd_matrix,2) );
    [sorted_ssd, idx] = sort(ssd_matrix(:));
    r = randi([1 45],1,1);
    while not(( R(idx(r)) - pby2 > 0 ) && ( R(idx(r)) + pby2 < s_y) && ( C(idx(r))- pby2> 0 ) && (C(idx(r)) + pby2 < s_x ))
        r = randi([1 100],1,1);
        disp(r);
    end
    patch = I( R(idx(r)) - pby2 : R(idx(r)) + pby2 , C(idx(r))- pby2 : C(idx(r)) + pby2 );
% patch =0;
end

function[ssd] = ssd_patch(T,M,I)
    ssd = imfilter(I.^2, M) -2*imfilter(I, M.*T) + sum(sum((M.*T).^2));
end